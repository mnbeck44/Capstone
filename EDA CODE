####INITIATE PSQL DIRECTLY TO DATABASE FROM COMMAND LINE####

psql spotdb

##################################################################################################

####USED TO COPY MULTIPLE CSV FILES TO MY MASTER TABLE####

(for FILE in ~/capstone_data/*.csv; do echo "COPY all_spot FROM '$FILE' WITH CSV HEADER;"; done) > import-commands.sql

##################################################################################################

####COUNT OF EACH PRICE UPDATE BY ZONE TO DETERMINE WHAT ZONE TO MODEL FIRST#### 
####ZONE 'us-east-1d' HAS THE MOST OCCURRENCES####

SELECT zone, COUNT (zone) FROM all_spot GROUP BY zone ORDER BY COUNT (zone) DESC;

 zone       |  count  
-----------------+---------
 us-east-1d      | 3804480
 us-east-1a      | 3600280
 us-east-1b      | 3510033
 us-west-2a      | 2646760
 us-west-2b      | 2601621
 us-west-2c      | 2598436
 us-west-1a      | 2408547
 us-east-1e      | 2389620
 eu-west-1b      | 2316952
 eu-west-1c      | 2279269
 us-west-1b      | 2278480
 eu-west-1a      | 2233439
 ap-southeast-1a | 2077463
 ap-southeast-1b | 2053693
 ap-northeast-1b | 2053525
 ap-southeast-2b | 1945418
 ap-northeast-1c | 1922428
 ap-southeast-2a | 1834412
 sa-east-1a      | 1364601
 sa-east-1c      |  936487
 ap-southeast-2c |  653168
 sa-east-1b      |  617838
 us-east-1c      |  445355
 ap-south-1b     |  373492
 ap-south-1a     |  358875
 ap-northeast-1a |  273338
 (26 rows)

###########################################################################################################

####COUNT OF EACH PRICE UPDATE BY OPERATING SYSTEM WITHIN THE 'us-east-1d' ZONE####
####Amazon VPC is notably different than non-VPC (EC2-Classic), thus different 'markets'####
	****My data is from 20150701, any accounts after 20131204 do not have the option of EC2-Classic - Thus the 			greater volume associated with VPC
	****VPC provides flexibility and security that EC2-Classic doesn't - Test to see if there is a noticeable 			difference in premium
	http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-vpc.html#differences-ec2-classic-vpc
	http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html
	http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/how-spot-instances-work.html

SELECT os, COUNT(os) FROM all_spot WHERE zone='us-east-1d' GROUP BY os ORDER BY COUNT(os) DESC;

 os            |  count  
-------------------------+---------
 Linux/UNIX (Amazon VPC) | 1059451
 Linux/UNIX              |  839291
 Windows (Amazon VPC)    |  656826
 Windows                 |  475024
 SUSE Linux (Amazon VPC) |  428875
 SUSE Linux              |  345013
(6 rows)
############################################################################################################

####TEST TO SEE IF THERE IS A NOTICEABLE DIFFERENCE IN PREMIUM ASSOCIATED WITH VPC OVER NON-VPC (USING ENTIRE DATA 		SET)
####RESULTS SHOW THERE IS A NOTICEABLE DIFFERENCE AND 'MAX' VALUES POSSIBLY SHOW A POSITIVELY SKEWED DIST (RIGHT 		TAIL)

SELECT os, AVG(price), MAX(price) FROM all_spot GROUP BY os ORDER BY AVG(price) DESC;

           os            |        avg        |  max   
-------------------------+-------------------+--------
 Windows (Amazon VPC)    |  0.95870769683136 | 252.29
 Windows                 | 0.583863409754912 | 242.62
 SUSE Linux (Amazon VPC) | 0.454137144344338 | 155.62
 Linux/UNIX (Amazon VPC) | 0.273522360108373 | 155.52
 SUSE Linux              | 0.258280070656224 |   55.3
 Linux/UNIX              | 0.194631952553551 |   81.4
(6 rows)
###########################################################################################################

####RUN THE SAME TEST ISOLATING ON 'us-east-1d' TO CHECK FOR RELATIONSHIP SIMILAR TO ABOVE####
####RESULTS SHOW THEY ARE####

SELECT os, AVG(price), MAX(price) FROM all_spot WHERE zone='us-east-1d' GROUP BY os ORDER BY AVG(price) DESC;

           os            |        avg        |  max   
-------------------------+-------------------+--------
 Windows (Amazon VPC)    |  0.77059020109995 | 192.26
 SUSE Linux (Amazon VPC) |  0.61173823611708 |  144.1
 Windows                 | 0.474056676726142 |  38.31
 Linux/UNIX (Amazon VPC) | 0.370981251175316 |    144
 SUSE Linux              |  0.24185226060538 |   55.3
 Linux/UNIX              | 0.208162646239176 |   55.2
(6 rows)
############################################################################################################

 ####I WILL PROCEED WITH Linux/UNIX (Amazon VPC) GIVEN VOLUME IS HIGHEST IN THIS OS WITHIN THE 'us-east-1d'####
 ####NOW TO CHECK FOR 'TYPE' (WITHIN Linux/UNIX (Amazon VPC) IN THE 'us-east-1d' TO GO FORWARD WITH####
 	####type='m2.xlarge' is the leader in volume but it is a previous generation for 'memory optimized' instance
 	####type='r3.2xlarge' is second in volume and the current generation for 'memory optimized' instance
 	####Both are still active but AWS urges users to upgrade to use the current gen
 	####They are in the same upgrade path
 	####Check to see if I can/should chain together by looking at trends in volume by date and if prices are similar
 	####Check other aspects related to each <think about what these aspects could be>
 	####Are they comparable in performance?
 	####Given they are comparable, is it possible for users to utilize multiple generations to take advantage of 		price mismatches?
 	####Better to perform this analysis in Python or SQL?
 	####Need to change to 'date' column to datetime? (Python vs SQL)
 	####Better to combine the 'date' and 'time' columns to model?
 	####Anything I'm not thinking about that I should be?
 	####Should I be looking at this in a different way? funneling from type first? from os first? what 2nd? 3rd?
 		####Questions to ask on a more fundamental basis? Companies agile around different operating systems?
 			Companies able to put bids in different zones regardless where they are?
 			Companies flexible around types?
 			What is the most confining aspect and start there then move away?
 	http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html
 	https://aws.amazon.com/ec2/instance-types/
 	https://aws.amazon.com/ec2/previous-generation/

SELECT type, COUNT(type) FROM all_spot WHERE zone='us-east-1d' AND os='Linux/UNIX (Amazon VPC)' GROUP BY type ORDER BY COUNT(type) DESC;

    type     | count 
-------------+-------
 m2.xlarge   | 27403
 r3.2xlarge  | 27057
 c3.2xlarge  | 27048
 c4.2xlarge  | 27024
 g2.2xlarge  | 27006
 c3.8xlarge  | 26984
 r3.4xlarge  | 26969
 r3.8xlarge  | 26950
 m3.xlarge   | 26904
 r3.xlarge   | 26876
 m1.xlarge   | 26784
 c3.4xlarge  | 26603
 m3.2xlarge  | 26549
 c3.xlarge   | 26210
 c4.8xlarge  | 26020
 m1.medium   | 25811
 m2.4xlarge  | 25754
 c4.xlarge   | 25644
 m3.large    | 25158
 c4.large    | 25027
 d2.xlarge   | 24745
 c4.4xlarge  | 24687
 m2.2xlarge  | 24336
 r3.large    | 23953
 c3.large    | 23588
 cc2.8xlarge | 23261
 cr1.8xlarge | 23216
 d2.4xlarge  | 23182
 hi1.4xlarge | 23161
 m1.large    | 22200
 d2.2xlarge  | 22191
 m3.medium   | 21116
 g2.8xlarge  | 20692
 i2.2xlarge  | 18405
 m4.2xlarge  | 18263
 d2.8xlarge  | 18176
 m4.4xlarge  | 17985
 i2.xlarge   | 17799
 m4.xlarge   | 17158
 m4.10xlarge | 16586
 i2.4xlarge  | 16569
 m4.large    | 15529
 c1.xlarge   | 15288
 i2.8xlarge  | 15051
 t1.micro    |  9220
 c1.medium   |  6031
 x1.32xlarge |  4445
 m4.16xlarge |  4300
 p2.xlarge   |  3638
 p2.16xlarge |  2139
 r4.4xlarge  |  2117
 x1.16xlarge |  1902
 r4.2xlarge  |  1842
 r4.16xlarge |  1739
 m1.small    |  1738
 r4.8xlarge  |  1714
 r4.large    |   687
 r4.xlarge   |   665
 p2.8xlarge  |   356
(59 rows) 

SELECT COUNT(*) FROM (SELECT DISTINCT type FROM all_spot) AS temp;
####Wouldn't work without the 'As temp' at the end, why?
####61 unique 'type's offered across the whole data set
count 
-------
    61